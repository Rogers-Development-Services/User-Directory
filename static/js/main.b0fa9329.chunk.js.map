{"version":3,"sources":["components/EmployeeRow.js","components/LastNameSortButton.js","components/NameForm.js","utils/compareLastNames.js","utils/compareFirstNames.js","components/EmployeeTable.js","utils/API.js","App.js","reportWebVitals.js","index.js"],"names":["styles","rowStyle","display","alignItems","justifyContent","EmployeeRow","props","style","src","employeeRecord","picture","large","alt","name","first","last","phone","email","dob","date","slice","LastNameSortButton","onClick","toggleSortDirection","NameForm","htmlFor","type","value","filterState","onChange","onFilterChange","id","compareLastNames","direction","employeeRecord1","employeeRecord2","name1","name2","result","compareFirstNames","headshotButtonStyle","visibility","padding","filterButtonsStyle","EmployeeTable","useState","employees","filteredEmployees","setFilteredEmployees","setFilterState","sortDirection","setSortDirection","useEffect","filteredRecords","filter","toLowerCase","startsWith","sort","event","target","preventDefault","stopPropagation","handleButtonClick","map","login","uuid","axios","get","App","employeeSearch","setEmployeeSearch","API","then","res","data","results","catch","err","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0fa9329.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n    rowStyle: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\"\r\n    }\r\n};\r\n\r\nfunction EmployeeRow(props) {\r\n    return (\r\n        <tr style={styles.rowStyle}>\r\n            <td><img src={props.employeeRecord.picture.large} alt={props.employeeRecord.name.first + props.employeeRecord.name.last}></img></td>\r\n            <td>{props.employeeRecord.name.first} </td>\r\n            <td>{props.employeeRecord.name.last}</td>\r\n            <td>{props.employeeRecord.phone}</td>\r\n            <td>{props.employeeRecord.email}</td>\r\n            <td>{props.employeeRecord.dob.date.slice(0, 10)}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EmployeeRow;","import React from \"react\";\r\n\r\nfunction LastNameSortButton(props) {\r\n    return <button onClick={props.toggleSortDirection}>Last Name</button>\r\n}\r\n\r\nexport default LastNameSortButton;","import React from \"react\";\r\nfunction NameForm(props) {\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"form-input\">Search Employee By Name </label>\r\n            <input \r\n            type=\"text\"\r\n            value={props.filterState}\r\n            onChange={props.onFilterChange}\r\n            name=\"formInput\"\r\n            id=\"form-input\" />\r\n        </div>\r\n    )\r\n}\r\nexport default NameForm;","function compareLastNames(direction = 1) {\r\n    // each employeeRecord's object last name being compared\r\n    return function (employeeRecord1, employeeRecord2) {\r\n        const name1 = `${employeeRecord1.name.last}`\r\n        const name2 = `${employeeRecord2.name.last}`\r\n\r\n        let result = 0;\r\n        if (name1 > name2) {\r\n            result = 1;\r\n        } else if (name1 < name2) {\r\n            result = -1;\r\n        }\r\n        return result * direction;\r\n    }\r\n}\r\n\r\nexport default compareLastNames;\r\n","function compareFirstNames(direction = 1) {\r\n    // each employeeRecord's object last name being compared\r\n    return function (employeeRecord1, employeeRecord2) {\r\n        const name1 = `${employeeRecord1.name.first}`\r\n        const name2 = `${employeeRecord2.name.first}`\r\n\r\n        let result = 0;\r\n        if (name1 > name2) {\r\n            result = 1;\r\n        } else if (name1 < name2) {\r\n            result = -1;\r\n        }\r\n        return result * direction;\r\n    }\r\n}\r\n\r\nexport default compareFirstNames;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport EmployeeRow from \"./EmployeeRow\";\r\nimport LastNameSortButton from \"./LastNameSortButton\";\r\nimport FirstNameSortButton from \"./FirstNameSortButton\";\r\nimport NameForm from \"./NameForm\";\r\nimport compareLastNames from \"../utils/compareLastNames\";\r\n// import API from \"../utils/API\";\r\nimport compareFirstNames from \"../utils/compareFirstNames\";\r\n\r\nconst styles = {\r\n    headshotButtonStyle: {\r\n        visibility: \"hidden\",\r\n        padding: \"1.5rem\"\r\n    },\r\n    filterButtonsStyle: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-around\"\r\n    },\r\n};\r\n\r\nfunction EmployeeTable(props) {\r\n    // const [employeeSearch, setEmployeeSearch] = useState(\"\");\r\n    const [filteredEmployees, setFilteredEmployees] = useState(props.employees);\r\n    const [filterState, setFilterState] = useState(\"\");\r\n    const [sortDirection, setSortDirection] = useState(1);\r\n\r\n    useEffect(function () {\r\n        // API.getEmployeeList()\r\n        // .then(res => {\r\n        //     this.setState({ employees: res.data.results });\r\n        // })\r\n        // .catch(err => console.log(err));\r\n\r\n        let filteredRecords = props.employees;\r\n        if (filterState !== '') {\r\n            filteredRecords = props.employees.filter(employeeRecord => {\r\n                return employeeRecord.name.last.toLowerCase().startsWith(filterState) || employeeRecord.name.first.toLowerCase().startsWith(filterState);\r\n            })\r\n        }\r\n\r\n        //sorting by last names\r\n        filteredRecords.sort(compareLastNames(sortDirection));\r\n        setFilteredEmployees(filteredRecords);\r\n\r\n        //sorting by first names\r\n        // filteredRecords.sort(compareFirstNames(sortDirection));\r\n        // setFilteredEmployees(filteredRecords);\r\n\r\n    }, [props.employees, sortDirection, filterState])\r\n\r\n    function onFilterChange(event) {\r\n        const { value } = event.target;\r\n        setFilterState(value);\r\n    };\r\n\r\n    function toggleSortDirection(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setSortDirection(-1 * sortDirection);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <NameForm filterState={filterState} onFilterChange={onFilterChange} />\r\n            <table>\r\n                <thead>\r\n                    <tr style={styles.filterButtonsStyle}>\r\n                        <td><button style={styles.headshotButtonStyle} name=\"\">Headshot</button></td>\r\n                        {/* <th><FirstNameSortButton toggleSortDirection={toggleSortDirection} /></th> */}\r\n                        <th><LastNameSortButton toggleSortDirection={toggleSortDirection} /></th>\r\n                        <td><button name=\"phone\" onClick={props.handleButtonClick}>Phone</button></td>\r\n                        <td><button name=\"email\" onClick={props.handleButtonClick}>Email</button></td>\r\n                        <td><button name=\"date-of-birth\" onClick={props.handleButtonClick}>D.O.B.</button>\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        filteredEmployees.map(employeeRecord =>\r\n                            (<EmployeeRow\r\n                                employeeRecord={employeeRecord}\r\n                                key={employeeRecord.login.uuid} />))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeTable;","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployeeList: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport EmployeeTable from \"./components/EmployeeTable\";\n// import employeeData from \"./employeeData.json\";\nimport API from \"./utils/API\"\n\nfunction App() {\n\n  const [employeeSearch, setEmployeeSearch] = useState([]);\n\n  useEffect(function() {\n\n    API.getEmployeeList()\n    .then(res => {\n      setEmployeeSearch(res.data.results);\n    })\n    .catch(err => console.log(err));\n\n  }, []) // this doesn't change\n\n  return (\n    <EmployeeTable employees={employeeSearch}/>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}